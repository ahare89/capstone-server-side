// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using capstone.Data;

#nullable disable

namespace capstone_server_side.Migrations
{
    [DbContext(typeof(capstoneDbContext))]
    [Migration("20231024165355_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("capstone.Models.CleaningJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("PropertyId")
                        .HasColumnType("integer");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("CleaningJobs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PropertyId = 1,
                            UserProfileId = 4
                        });
                });

            modelBuilder.Entity("capstone.Models.Property", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("CleaningCost")
                        .HasColumnType("numeric");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PropertyTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("SqFt")
                        .HasColumnType("integer");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.Property<bool>("isActive")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("PropertyTypeId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Properties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "15142 Mulholland Dr, Los Angeles, CA, 90077",
                            CleaningCost = 150.00m,
                            Description = "Rodney Walker designed mid-century located within prestigious Bel Air. This renovated and updated architectural gem is set up a private drive and boasts panoramic glass wall views of rolling hills, valley, and city lights from every location of its open floor plan. Skylights mixed with elements of glass, steel, concrete, and wood contrasted with the scenery give this home the outdoor feeling sought after by this masterful architect.",
                            PropertyTypeId = 1,
                            SqFt = 1542,
                            UserProfileId = 5,
                            isActive = true
                        });
                });

            modelBuilder.Entity("capstone.Models.PropertyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PropertyTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Single-Family Home"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Duplex"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Condominium"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Manufactured"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Tiny Home"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Cabin"
                        });
                });

            modelBuilder.Entity("capstone.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "101 Main Street",
                            FirstName = "Admina",
                            IdentityUserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            LastName = "Strator"
                        },
                        new
                        {
                            Id = 2,
                            Address = "3517 Gerald L. Bates Drive",
                            FirstName = "Barry",
                            IdentityUserId = "a5fe6012-4e5d-4319-a5e3-62c0802f83b0",
                            LastName = "Sanderson"
                        },
                        new
                        {
                            Id = 3,
                            Address = "2706 Hamilton Avenue",
                            FirstName = "Michael",
                            IdentityUserId = "89b6e28a-98df-46b6-9dcb-3f7996f4d29f",
                            LastName = "Barrick"
                        },
                        new
                        {
                            Id = 4,
                            Address = "3517 Gerald L. Bates Drive",
                            FirstName = "Winnie",
                            IdentityUserId = "f9c38e11-ae67-483a-a2a7-88e1d3c917d6",
                            LastName = "Sanderson"
                        },
                        new
                        {
                            Id = 5,
                            Address = "457 Haight Street",
                            FirstName = "Joe",
                            IdentityUserId = "c451fa23-21d9-4959-9e08-2040a3a00a80",
                            LastName = "Sampson"
                        });
                });

            modelBuilder.Entity("Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PropertyId")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PropertyId = 1,
                            Url = "https://photos.zillowstatic.com/fp/6d17c3a534ab7a2ac07162af284921a1-uncropped_scaled_within_1536_1152.webp"
                        },
                        new
                        {
                            Id = 2,
                            PropertyId = 1,
                            Url = "https://photos.zillowstatic.com/fp/120013c596711cbe3e39b5e1bb8881a2-uncropped_scaled_within_1536_1152.webp"
                        },
                        new
                        {
                            Id = 3,
                            PropertyId = 1,
                            Url = "https://photos.zillowstatic.com/fp/f8502efdafe6a682646d832ad9c3641b-uncropped_scaled_within_1536_1152.webp"
                        },
                        new
                        {
                            Id = 4,
                            PropertyId = 1,
                            Url = "https://photos.zillowstatic.com/fp/6d17c3a534ab7a2ac07162af284921a1-uncropped_scaled_within_1536_1152.webp"
                        },
                        new
                        {
                            Id = 5,
                            PropertyId = 1,
                            Url = "https://photos.zillowstatic.com/fp/0779ac588dfeecf20adb1ff91724fb9a-uncropped_scaled_within_1536_1152.webp"
                        },
                        new
                        {
                            Id = 6,
                            PropertyId = 1,
                            Url = "https://photos.zillowstatic.com/fp/607dab54c778c9c420d3a7d905fdb485-uncropped_scaled_within_1536_1152.webp"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35",
                            ConcurrencyStamp = "b123b2ce-a22d-4602-9d04-6436a87f51dd",
                            Name = "Admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = "1a6a6a8c-8e5c-4bf2-9cb5-9c93e4d17b36",
                            ConcurrencyStamp = "1d2aaf1f-08cd-412f-b8b6-6094cdb68f66",
                            Name = "Host",
                            NormalizedName = "host"
                        },
                        new
                        {
                            Id = "f0a7b0d7-25ab-4f2e-a9a4-6e84e99897c5",
                            ConcurrencyStamp = "4c76a2c9-3146-491b-8daf-ca5ccbd6a8d7",
                            Name = "Cleaner",
                            NormalizedName = "cleaner"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d2e6f0c3-fa34-4c70-b1a3-94013d424584",
                            Email = "admina@strator.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEDCrNs3Q1Ta5fIxjONb5btsSm6mXmZKyoJYmIKFuSq+FvXMg9QGKWRzTyxKGhUOrHA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5b8902b7-c974-4148-97c9-8429a55885bb",
                            TwoFactorEnabled = false,
                            UserName = "Administrator"
                        },
                        new
                        {
                            Id = "a5fe6012-4e5d-4319-a5e3-62c0802f83b0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a2982db0-5a5f-4e55-a54a-6a23b0a12e3a",
                            Email = "barry@sanderson.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEENFwNageIfx81UIuWjbudFaLjIeGLFgqdkpIBAdgQuVuG3K9ah2e1118uZen/HAwQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8bf23152-0616-4fd3-a2e6-3e0e7ae1a19e",
                            TwoFactorEnabled = false,
                            UserName = "bsanderson"
                        },
                        new
                        {
                            Id = "89b6e28a-98df-46b6-9dcb-3f7996f4d29f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3b72a51d-a209-4e25-9878-a7c1f17f7660",
                            Email = "michael@barrick.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEKPtlOpzF61YIXlftl0nxPYcT/xSR7uL+iAem/XmR1YG4S7zafu0hjtM1nbyfen1jQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "77014b18-2f6b-4324-914b-31a10b3ceee0",
                            TwoFactorEnabled = false,
                            UserName = "mbarrick"
                        },
                        new
                        {
                            Id = "f9c38e11-ae67-483a-a2a7-88e1d3c917d6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1907324d-0cc2-4b8f-9517-c8abb532952c",
                            Email = "winnie@sanderson.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEOuD+hatFgJHV5RCpaINREmQktetrQOo017n+CTz2oIGGiL0YzLYU+MDiC1LSD2ctg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b3620a1c-12c2-4b22-869a-fef0e503e9f5",
                            TwoFactorEnabled = false,
                            UserName = "wsanderson"
                        },
                        new
                        {
                            Id = "c451fa23-21d9-4959-9e08-2040a3a00a80",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "da51de76-3d83-44e8-930d-b1a437223c89",
                            Email = "joe@sampson.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEPpIGVY/ddTSTja9PXdNuMv1Ruewjlp3iQ1/Lfb/aFhhXVemCK7l6RloO2888cOz3A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3640334b-6a5e-4659-b34d-242730d2a568",
                            TwoFactorEnabled = false,
                            UserName = "jsampson"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            RoleId = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35"
                        },
                        new
                        {
                            UserId = "a5fe6012-4e5d-4319-a5e3-62c0802f83b0",
                            RoleId = "f0a7b0d7-25ab-4f2e-a9a4-6e84e99897c5"
                        },
                        new
                        {
                            UserId = "89b6e28a-98df-46b6-9dcb-3f7996f4d29f",
                            RoleId = "1a6a6a8c-8e5c-4bf2-9cb5-9c93e4d17b36"
                        },
                        new
                        {
                            UserId = "f9c38e11-ae67-483a-a2a7-88e1d3c917d6",
                            RoleId = "f0a7b0d7-25ab-4f2e-a9a4-6e84e99897c5"
                        },
                        new
                        {
                            UserId = "c451fa23-21d9-4959-9e08-2040a3a00a80",
                            RoleId = "1a6a6a8c-8e5c-4bf2-9cb5-9c93e4d17b36"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("capstone.Models.CleaningJob", b =>
                {
                    b.HasOne("capstone.Models.Property", "Property")
                        .WithMany("CleaningJobs")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("capstone.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("capstone.Models.Property", b =>
                {
                    b.HasOne("capstone.Models.PropertyType", "PropertyType")
                        .WithMany()
                        .HasForeignKey("PropertyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("capstone.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PropertyType");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("capstone.Models.UserProfile", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("Image", b =>
                {
                    b.HasOne("capstone.Models.Property", "Property")
                        .WithMany("Images")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("capstone.Models.Property", b =>
                {
                    b.Navigation("CleaningJobs");

                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
